/*
 * Copyright (c) 2022 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <behaviors.dtsi>
#include <dt-bindings/zmk/bt.h>
#include <dt-bindings/zmk/ext_power.h>
#include <dt-bindings/zmk/keys.h>

/ {
    behaviors {
        /*
         * This gives me:
         * - Hold = mod
         * - Tap = key
         * - Tap then hold = key (which then repeats)
         * - Tap then tap another key quickly = both keys
         */

        ht: hold_tap {
            compatible = "zmk,behavior-hold-tap";
            #binding-cells = <2>;
            flavor = "tap-preferred";
            tapping-term-ms = <200>;
            quick-tap-ms = <200>;
            bindings = <&kp>, <&kp>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            // ------------------------------------------------------------------------------------------------------------
            // |  ESC  |  1  |  2  |  3   |  4   |  5   |                   |  6   |  7    |  8    |  9   |   0   |   `   |
            // |  TAB  |  Q  |  W  |  E   |  R   |  T   |                   |  Y   |  U    |  I    |  O   |   P   |   -   |
            // |  CTRL |  A  |  S  |  D   |  F   |  G   |                   |  H   |  J    |  K    |  L   |   ;   |   '   |
            // | SHIFT |  Z  |  X  |  C   |  V   |  B   |   "["  |  |  "]"  |  N   |  M    |  ,    |  .   |   /   | SHIFT |
            //                     | ALT  | GUI  | LOWER|  SPACE |  | ENTER | RAISE| BSPC  | GUI   |

            bindings = <
&kp EQUAL                &kp N1  &kp N2          &kp N3       &kp N4            &kp N5                                                       &kp N6       &kp N7             &kp N8       &kp N9           &kp N0    &kp BACKSLASH
&kp TAB                  &kp Q   &kp W           &kp E        &kp R             &kp T                                                        &kp Y        &kp U              &kp I        &kp O            &kp P     &kp MINUS
&kp LEFT_SHIFT           &kp A   &ht LEFT_ALT S  &ht LCTRL D  &ht LEFT_SHIFT F  &kp G                                                        &kp H        &ht RIGHT_SHIFT J  &ht RCTRL K  &ht RIGHT_ALT L  &kp SEMI  &kp SQT
&ht LEFT_CONTROL ESCAPE  &kp Z   &kp X           &kp C        &kp V             &kp B         &none               &none                      &kp N        &kp M              &kp COMMA    &kp DOT          &kp FSLH  &kp GRAVE
                                                 &mo 3        &mo 4             &lt 1 RETURN  &kp LEFT_COMMAND    &ht RIGHT_SHIFT BACKSPACE  &lt 2 SPACE  &none              &tog 5
            >;
        };

        one {
            // ------------------------------------------------------------------------------------------------------------
            // | BTCLR | BT1 | BT2 |  BT3 |  BT4 |  BT5 |                   |      |       |       |      |       |       |
            // |  F1   |  F2 |  F3 |  F4  |  F5  |  F6  |                   |  F7  |  F8   |  F9   |  F10 |  F11  |  F12  |
            // |   `   |  !  |  @  |  #   |  $   |  %   |                   |  ^   |  &    |  *    |  (   |   )   |   ~   |
            // |       |     |     |      |      |      |        |  |       |      |  _    |  +    |  {   |   }   |  "|"  |
            //                     |      |      |      |        |  |       |      |       |       |

            bindings = <
&kp DEL    &kp F1           &kp F2            &kp F3             &kp F4                &kp F5                                   &kp F6     &kp F7     &kp F8     &kp F9        &kp F10          &kp F11
&kp GRAVE  &kp EXCLAMATION  &kp AT_SIGN       &kp HASH           &kp DOLLAR            &kp PERCENT                              &kp KP_N7  &kp KP_N8  &kp KP_N9  &kp KP_MINUS  &kp KP_DIVIDE    &kp F12
&trans     &kp CARET        &kp AMPERSAND     &kp ASTERISK       &kp LEFT_PARENTHESIS  &kp RIGHT_PARENTHESIS                    &kp KP_N4  &kp KP_N5  &kp KP_N6  &kp KP_PLUS   &kp KP_ASTERISK  &kp BACKSPACE
&trans     &trans           &kp LEFT_BRACKET  &kp RIGHT_BRACKET  &kp LEFT_BRACE        &kp RIGHT_BRACE        &trans    &trans  &kp KP_N1  &kp KP_N2  &kp KP_N3  &kp PERIOD    &kp EQUAL        &kp RETURN
                                              &trans             &trans                &trans                 &trans    &trans  &kp KP_N0  &trans     &trans
            >;
        };

        two {
            bindings = <
&trans  &trans      &trans        &trans        &trans            &trans                    &trans     &trans     &trans    &trans     &trans  &kp DEL
&trans  &trans      &kp C_VOL_DN  &kp C_VOL_UP  &kp K_MUTE        &trans                    &kp PG_UP  &kp PG_DN  &kp HOME  &kp END    &trans  &trans
&trans  &kp C_PREV  &kp C_NEXT    &kp C_STOP    &kp C_PLAY_PAUSE  &trans                    &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans  &trans
&trans  &trans      &trans        &trans        &trans            &trans  &trans    &trans  &trans     &trans     &trans    &trans     &trans  &trans
                                  &trans        &trans            &trans  &trans    &trans  &trans     &trans     &trans
            >;
        };

        three {
            bindings = <
&bt BT_CLR  &bt BT_SEL 0      &bt BT_SEL 1       &bt BT_SEL 2       &bt BT_SEL 3  &bt BT_SEL 4                    &trans     &trans     &trans    &trans    &trans    &trans
&kp F1      &kp F2            &kp F3             &kp F4             &kp F5        &kp F6                          &kp F7     &kp F8     &kp F9    &kp F10   &kp F11   &kp F12
&kp GRAVE   &kp EXCL          &kp AT             &kp HASH           &kp DOLLAR    &kp PRCNT                       &kp CARET  &kp AMPS   &kp STAR  &kp LPAR  &kp RPAR  &kp TILDE
&trans      &ext_power EP_ON  &ext_power EP_OFF  &ext_power EP_TOG  &trans        &trans        &trans    &trans  &trans     &kp MINUS  &kp PLUS  &kp LBRC  &kp RBRC  &kp PIPE
                                                 &trans             &trans        &trans        &trans    &trans  &trans     &trans     &trans
            >;
        };

        four {
            bindings = <
&trans     &trans  &trans  &trans   &trans   &trans                     &trans       &trans     &trans     &trans    &trans     &trans
&kp GRAVE  &kp N1  &kp N2  &kp N3   &kp N4   &kp N5                     &kp N6       &kp N7     &kp N8     &kp N9    &kp N0     &trans
&kp F1     &kp F2  &kp F3  &kp F4   &kp F5   &kp F6                     &trans       &kp LEFT   &kp DOWN   &kp UP    &kp RIGHT  &trans
&kp F7     &kp F8  &kp F9  &kp F10  &kp F11  &kp F12  &trans    &trans  &kp KP_PLUS  &kp MINUS  &kp EQUAL  &kp LBKT  &kp RBKT   &kp BSLH
                           &trans   &trans   &trans   &trans    &trans  &trans       &trans     &trans
            >;
        };

        GAMING {
            bindings = <
&kp ESC    &kp N1  &kp N2  &kp N3  &kp N4  &kp N5                            &kp N6     &kp N7  &kp N8     &kp N9   &kp N0    &kp MINUS
&kp TAB    &kp Q   &kp W   &kp E   &kp R   &kp T                             &kp Y      &kp U   &kp I      &kp O    &kp P     &kp EQUAL
&kp LSHFT  &kp A   &kp S   &kp D   &kp F   &kp G                             &kp H      &kp J   &kp K      &kp L    &kp SEMI  &kp APOS
&kp LCTRL  &kp Z   &kp X   &kp C   &kp V   &kp B      &kp LGUI     &trans    &kp N      &kp M   &kp COMMA  &kp DOT  &kp FSLH  &trans
                           &trans  &trans  &kp ENTER  &kp SPACE    &kp BSPC  &kp SPACE  &trans  &trans
            >;
        };
    };
};
